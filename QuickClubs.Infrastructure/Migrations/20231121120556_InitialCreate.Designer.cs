// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuickClubs.Infrastructure.Persistence;

#nullable disable

namespace QuickClubs.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231121120556_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuickClubs.Domain.Clubs.Club", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAffiliate")
                        .HasColumnType("bit");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Club", (string)null);
                });

            modelBuilder.Entity("QuickClubs.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("QuickClubs.Domain.Clubs.Club", b =>
                {
                    b.OwnsOne("QuickClubs.Domain.Clubs.Entities.ClubSettings", "Settings", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("Id");

                            b1.Property<Guid>("ClubId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.Property<bool>("MembershipNeedsApproval")
                                .HasColumnType("bit");

                            b1.HasKey("Id", "ClubId");

                            b1.HasIndex("ClubId")
                                .IsUnique();

                            b1.ToTable("ClubSettings", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ClubId");
                        });

                    b.OwnsOne("QuickClubs.Domain.Clubs.ValueObjects.ClubName", "Name", b1 =>
                        {
                            b1.Property<Guid>("ClubId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Acronym")
                                .IsRequired()
                                .HasMaxLength(8)
                                .HasColumnType("nvarchar(8)")
                                .HasColumnName("Acronym");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("FullName");

                            b1.HasKey("ClubId");

                            b1.HasIndex("Acronym")
                                .IsUnique();

                            b1.HasIndex("FullName")
                                .IsUnique();

                            b1.ToTable("Club");

                            b1.WithOwner()
                                .HasForeignKey("ClubId");
                        });

                    b.OwnsOne("QuickClubs.Domain.Clubs.ValueObjects.ClubWebsite", "Website", b1 =>
                        {
                            b1.Property<Guid>("ClubId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("nvarchar(80)")
                                .HasColumnName("Website");

                            b1.HasKey("ClubId");

                            b1.HasIndex("Url")
                                .IsUnique();

                            b1.ToTable("Club");

                            b1.WithOwner()
                                .HasForeignKey("ClubId");
                        });

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Settings");

                    b.Navigation("Website")
                        .IsRequired();
                });

            modelBuilder.Entity("QuickClubs.Domain.Users.User", b =>
                {
                    b.OwnsOne("QuickClubs.Domain.Users.Entities.UserProfile", "Profile", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateOnly>("DateOfBirth")
                                .HasColumnType("date");

                            b1.HasKey("Id", "UserId");

                            b1.HasIndex("UserId")
                                .IsUnique();

                            b1.ToTable("UserProfile", (string)null);

                            b1.WithOwner("User")
                                .HasForeignKey("UserId");

                            b1.OwnsOne("QuickClubs.Domain.Common.Address", "Address", b2 =>
                                {
                                    b2.Property<Guid>("UserProfileId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("UserProfileUserId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Building")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)");

                                    b2.Property<string>("County")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("nvarchar(20)");

                                    b2.Property<string>("Locality")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)");

                                    b2.Property<string>("Postcode")
                                        .IsRequired()
                                        .HasMaxLength(8)
                                        .HasColumnType("nvarchar(8)");

                                    b2.Property<string>("Street")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)");

                                    b2.Property<string>("Town")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)");

                                    b2.HasKey("UserProfileId", "UserProfileUserId");

                                    b2.ToTable("UserProfile");

                                    b2.WithOwner()
                                        .HasForeignKey("UserProfileId", "UserProfileUserId");
                                });

                            b1.Navigation("Address")
                                .IsRequired();

                            b1.Navigation("User");
                        });

                    b.Navigation("Profile");
                });
#pragma warning restore 612, 618
        }
    }
}
